{"version":3,"sources":["logo.svg","util/Yelp.js","components/Business/Business.js","components/BusinessList/BusinessList.js","components/SearchBar/SearchBar.js","components/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","Yelp","search","term","location","sortBy","fetch","headers","Authorization","response","json","jsonResponse","businesses","map","business","id","imageSrc","image_url","name","address","address1","city","state","zipCode","zip_code","category","categories","title","rating","reviewCount","review_count","Business","className","src","this","props","alt","React","Component","BusinessList","key","SearchBar","sortByOptions","handleTermChange","bind","handleLocationChange","handleSearch","sortByOption","setState","event","target","value","searchYelp","preventDefault","Object","keys","sortByOptionValue","getSortByClass","onClick","handleSortByChange","renderSortByOptions","onChange","placeholder","App","then","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.73d7cb8f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","const api_key = 'E7Rr3i1hxGdJ2WweB-DUjl2RNag2RU7dicfkDslDZ-NA5XPtfhF4CfwbyVd2OnE-uwnFyH_b63ZVX3y8JE9v0dKwQ3hncoJZ4PcLOrFvZOR1cP9OwJf-7tECkZToXnYx';\r\n\r\nconst Yelp = {\r\n    async search(term, location, sortBy) {\r\n        const response = await fetch(`https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`, {\r\n            headers: {\r\n                Authorization: `Bearer ${api_key}`\r\n            }\r\n        });\r\n        const jsonResponse = await response.json();\r\n        if (jsonResponse.businesses) {\r\n            return jsonResponse.businesses.map(business => {\r\n                return {\r\n                    id: business.id,\r\n                    imageSrc: business.image_url,\r\n                    name: business.name,\r\n                    address: business.location.address1,\r\n                    city: business.location.city,\r\n                    state: business.location.state,\r\n                    zipCode: business.location.zip_code,\r\n                    category: business.categories[0].title,\r\n                    rating: business.rating,\r\n                    reviewCount: business.review_count\r\n                };\r\n            });\r\n        }\r\n        else {\r\n            return [];\r\n        }\r\n    }\r\n};\r\n\r\nexport default Yelp;","import React from 'react';\r\nimport './Business.css';\r\n\r\n\r\nclass Business extends React.Component {\r\n    render() {\r\n        return (\r\n        <div className=\"Business\">\r\n            <div className=\"image-container\">\r\n                <img src={this.props.business.imageSrc} alt='' />\r\n            </div>\r\n            <h2>{this.props.business.name}</h2>\r\n            <div className=\"Business-information\">\r\n                <div className=\"Business-address\">\r\n                    <p>{this.props.business.address}</p>\r\n                    <p>{this.props.business.city}</p>\r\n                    <p>{this.props.business.state} {this.props.business.zipCode}</p>\r\n                </div>\r\n                <div className=\"Business-reviews\">\r\n                    <h2>{this.props.business.category}</h2>\r\n                    <h3 className=\"rating\">{this.props.business.rating} stars</h3>\r\n                    <p>{this.props.business.reviewCount} reviews</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Business;","import React from 'react';\r\nimport './BusinessList.css';\r\nimport Business from '../Business/Business';\r\n\r\nclass BusinessList extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"BusinessList\">\r\n                {this.props.businesses.map(business => {\r\n                    return <Business key={business.id} business={business} />;\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default BusinessList;","import React from 'react';\r\nimport './SearchBar.css';\r\n\r\n\r\nclass SearchBar extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            term: '',\r\n            location: '',\r\n            sortBy: 'best_match'\r\n        };\r\n\r\n        this.sortByOptions = {\r\n            'Best Match': 'best_match',\r\n            'Highest Rated': 'rating',\r\n            'Most Reviewd': 'review_count'\r\n        };\r\n\r\n        this.handleTermChange = this.handleTermChange.bind(this);\r\n        this.handleLocationChange = this.handleLocationChange.bind(this);\r\n        this.handleSearch = this.handleSearch.bind(this);\r\n    }\r\n\r\n    getSortByClass(sortByOption) {\r\n        if(this.state.sortBy === sortByOption) {\r\n            return 'active';\r\n        }\r\n        else\r\n            return '';\r\n    }\r\n\r\n    handleSortByChange(sortByOption) {\r\n        this.setState({sortBy: sortByOption});\r\n    }\r\n\r\n    handleTermChange(event) {\r\n        this.setState({ term: event.target.value });\r\n    }\r\n\r\n    handleLocationChange(event) {\r\n        this.setState( {location: event.target.value });\r\n    }\r\n\r\n    handleSearch(event) {\r\n        this.props.searchYelp(this.state.term, this.state.location, this.state.sortBy);\r\n        event.preventDefault();\r\n    }\r\n\r\n    renderSortByOptions() {\r\n        return Object.keys(this.sortByOptions).map(sortByOption => {\r\n            let sortByOptionValue = this.sortByOptions[sortByOption];\r\n            return <li className={this.getSortByClass(sortByOptionValue)} key={sortByOptionValue} onClick={this.handleSortByChange.bind(this, sortByOptionValue)}>{sortByOption}</li>\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"SearchBar\">\r\n            <div className=\"SearchBar-sort-options\">\r\n                <ul>\r\n                    {this.renderSortByOptions()}\r\n                </ul>\r\n            </div>\r\n            <div className=\"SearchBar-fields\">\r\n                <input onChange={this.handleTermChange} placeholder=\"Search Businesses\" />\r\n                <input onChange={this.handleLocationChange} placeholder=\"Where?\" />\r\n            </div>\r\n            <div className=\"SearchBar-submit\">\r\n                <a onClick={this.handleSearch}>Let's Go</a>\r\n            </div>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default SearchBar;","import React from 'react';\nimport logo from './../../logo.svg';\nimport './App.css';\nimport Yelp from '../../util/Yelp'\n\nimport BusinessList from '../BusinessList/BusinessList';\nimport SearchBar from '../SearchBar/SearchBar';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {businesses: []};\n    this.searchYelp = this.searchYelp.bind(this);\n  }\n\n  searchYelp(term, location, sortBy) {\n    Yelp.search(term, location, sortBy).then(businesses => {\n      this.setState({ businesses: businesses });\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n      <h1>ravenous</h1>\n      <SearchBar searchYelp={this.searchYelp}/>\n      <BusinessList businesses={this.state.businesses} /> \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}